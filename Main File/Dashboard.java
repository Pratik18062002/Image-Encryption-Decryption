
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.List;
import java.awt.TextArea;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Base64;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author HP
 */
public class Dashboard extends javax.swing.JFrame {
    String loginUserId = "";
   // private javax.swing.JButton jButtonBrowseImage;
        
    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
        
    }

    Dashboard(String loginUserId) {
        this.loginUserId = loginUserId;
        initComponents();
       // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonBrowseImage = new javax.swing.JButton();
        jButtonEncrypt = new javax.swing.JButton();
        jLabelImage = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Encrypt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButtonDecrypt = new javax.swing.JButton();
        labelSecretKey2 = new javax.swing.JLabel();
        textSecretKey = new javax.swing.JTextField();
        fileSize = new javax.swing.JLabel();
        buttonCopy = new javax.swing.JButton();
        buttonCopy2 = new javax.swing.JButton();
        comboBox1 = new javax.swing.JComboBox<>();
        btnShare = new javax.swing.JButton();
        btnInbox = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 204, 255));

        jPanel1.setBackground(new java.awt.Color(0, 204, 255));

        jButtonBrowseImage.setBackground(new java.awt.Color(0, 204, 255));
        jButtonBrowseImage.setForeground(new java.awt.Color(255, 255, 255));
        jButtonBrowseImage.setText("Choose File");
        jButtonBrowseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseImageActionPerformed(evt);
            }
        });

        jButtonEncrypt.setBackground(new java.awt.Color(0, 204, 255));
        jButtonEncrypt.setForeground(new java.awt.Color(255, 255, 255));
        jButtonEncrypt.setText("Encrypt");
        jButtonEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptActionPerformed(evt);
            }
        });

        jLabelImage.setBackground(new java.awt.Color(255, 255, 255));
        jLabelImage.setForeground(new java.awt.Color(255, 255, 255));
        jLabelImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("           IMAGE ENCRYPTION");

        Encrypt.setToolTipText("Encrypted String");
        Encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Preview Image");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Encryped String :");

        jButtonDecrypt.setBackground(new java.awt.Color(0, 204, 255));
        jButtonDecrypt.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDecrypt.setText("Decrypt");
        jButtonDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecryptActionPerformed(evt);
            }
        });

        labelSecretKey2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelSecretKey2.setForeground(new java.awt.Color(255, 255, 255));
        labelSecretKey2.setText("Security Key : ");

        textSecretKey.setBackground(new java.awt.Color(0, 204, 255));
        textSecretKey.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        textSecretKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSecretKeyActionPerformed(evt);
            }
        });

        buttonCopy.setBackground(new java.awt.Color(0, 204, 255));
        buttonCopy.setForeground(new java.awt.Color(255, 255, 255));
        buttonCopy.setText("Copy");
        buttonCopy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonCopyMouseClicked(evt);
            }
        });
        buttonCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCopyActionPerformed(evt);
            }
        });

        buttonCopy2.setBackground(new java.awt.Color(0, 204, 255));
        buttonCopy2.setForeground(new java.awt.Color(255, 255, 255));
        buttonCopy2.setText("Copy");
        buttonCopy2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonCopy2MouseClicked(evt);
            }
        });
        buttonCopy2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCopy2ActionPerformed(evt);
            }
        });

        comboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        comboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox1ActionPerformed(evt);
            }
        });

        btnShare.setText("Share");
        btnShare.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnShareMouseClicked(evt);
            }
        });

        btnInbox.setText("Inbox");
        btnInbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Encrypt))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(99, 99, 99)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(203, 203, 203)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(123, 123, 123)
                                .addComponent(jLabel3)))
                        .addGap(0, 143, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(labelSecretKey2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textSecretKey)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonCopy)
                .addGap(92, 92, 92))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(comboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(54, 54, 54)
                        .addComponent(buttonCopy2)
                        .addGap(255, 255, 255))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonBrowseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(fileSize, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(btnShare)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnInbox)
                .addGap(21, 21, 21))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonBrowseImage, jButtonEncrypt});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(btnInbox)
                .addGap(33, 33, 33)
                .addComponent(jLabel2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(fileSize, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBrowseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEncrypt))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSecretKey2)
                    .addComponent(textSecretKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Encrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCopy2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShare))
                .addGap(18, 18, 18))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonBrowseImage, jButtonEncrypt});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    File selectedImageFile = null;
    String selectedFileName = "";
    private void jButtonBrowseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseImageActionPerformed
        JFileChooser browseImageFile = new JFileChooser();
        //Filter image extensions
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("IMAGES", "png", "jpg", "jpeg");
        browseImageFile.addChoosableFileFilter(fnef);
        int showOpenDialogue = browseImageFile.showOpenDialog(null);
         
        if (showOpenDialogue == JFileChooser.APPROVE_OPTION) {
            selectedImageFile = browseImageFile.getSelectedFile();
            String selectedImagePath = selectedImageFile.getAbsolutePath();
            selectedFileName = selectedImageFile.getName();
           // JOptionPane.showMessageDialog(null, selectedImagePath);
            //Display image on jlable
            ImageIcon ii = new ImageIcon(selectedImagePath);
//            Resize image to fit jlabel
            Image image = ii.getImage().getScaledInstance(jLabelImage.getWidth(), jLabelImage.getHeight(), Image.SCALE_DEFAULT);
             
            jLabelImage.setIcon(new ImageIcon(image));
            
            double bytes = selectedImageFile.length();
            String fileSizeInKB = String.format("%.2f", bytes/1024) + "kb";
            fileSize.setText(fileSizeInKB);
            System.out.println("File Size : " + fileSizeInKB);
       
       
       
       
        }
    }//GEN-LAST:event_jButtonBrowseImageActionPerformed

    private void jButtonEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptActionPerformed
        try {
            // TODO add your handling code here:
//        Image image1 = ((ImageIcon)jLabelImage.getIcon()).getImage();

//String base64String = ConvertImageIconToBase64String((ImageIcon)jLabelImage.getIcon());
byte[] fileContent = Files.readAllBytes(selectedImageFile.toPath());
String base64String = Base64.getEncoder().encodeToString(fileContent);
//        String base64String = new String(byteArray);
aesEncryption(base64String);
        } catch (IOException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            getAllUsers();
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButtonEncryptActionPerformed

    public void getAllUsers() throws SQLException{
        System.out.println("loginUserId : "+loginUserId);
        Connection myCon=null;
        Statement myStmt=null;
        ResultSet myRs=null;
        try {
            
             myCon= DriverManager.getConnection("jdbc:mysql://localhost:3306/image_encryption_decryption","root","root");
             myStmt=myCon.createStatement();
            
            myRs=myStmt.executeQuery("select ID, FULL_NAME, USERNAME from user  where ID <> "+loginUserId);
            
            
            while (myRs.next()){
            System.out.println("name :: "+ myRs.getString("FULL_NAME") +" :: ID :: "+ myRs.getString("ID"));
            
            String id = myRs.getString("ID");
            String fullName = myRs.getString("FULL_NAME");
            String userName = myRs.getString("USERNAME");
            
                comboBox1.addItem(id+":"+fullName+":"+userName);
            
            }
            
                    } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
           
        }
        
        if(myRs!=null){
        myRs.close();
        }
        if(myStmt!=null){
        myStmt.close();
        }
        if(myCon!=null){
        myCon.close();
        }
        
        
        
    }
    
    private void EncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptActionPerformed
            Encrypt = new encrypt(20);
        TextArea textArea = new TextArea(5, 20);
         textArea.setEditable(false);
    }//GEN-LAST:event_EncryptActionPerformed

    private void jButtonDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecryptActionPerformed
        // TODO add your handling code here:
          Decryption fm = new Decryption();
                fm.setVisible(true);
                //this.setVisible(false);
    }//GEN-LAST:event_jButtonDecryptActionPerformed
    
    private void buttonCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCopyActionPerformed
       String myString = textSecretKey.getText();
       StringSelection stringSelection = new StringSelection(myString);
     Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
     clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_buttonCopyActionPerformed

    private void buttonCopyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCopyMouseClicked
        // TODO add your handling code here   
        
        
    }//GEN-LAST:event_buttonCopyMouseClicked

    private void textSecretKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSecretKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textSecretKeyActionPerformed

    private void buttonCopy2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonCopy2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonCopy2MouseClicked

    private void buttonCopy2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCopy2ActionPerformed
        // TODO add your handling code here:
         String myString = Encrypt.getText();
       StringSelection stringSelection = new StringSelection(myString);
     Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
     clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_buttonCopy2ActionPerformed

    private void comboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_comboBox1ActionPerformed

    private void btnShareMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnShareMouseClicked
        // TODO add your handling code here:
        
        try {
            
                String encryptedString = Encrypt.getText();
                String encryptionKey = textSecretKey.getText();
                String receiverUserId = comboBox1.getSelectedItem().toString();
                
                if(receiverUserId.contains(":")){
                    receiverUserId = receiverUserId.split(":")[0];
                }
            
                Connection myCon = null;
                myCon = DriverManager.getConnection("jdbc:mysql://localhost:3306/image_encryption_decryption", "root", "root");

                String sql = "INSERT INTO communications (ENCRYPTED_DATA, ENCRPTION_KEY, SENDER_USERID, RECIEVER_USERID, FILE_NAME) values (?, ?, ?, ?, ?)";
                PreparedStatement statement = myCon.prepareStatement(sql);
                statement.setString(1, encryptedString);
                statement.setString(2, encryptionKey);
                statement.setString(3, loginUserId);
                statement.setString(4, receiverUserId);
                statement.setString(5, selectedFileName);
                
                statement.executeUpdate();

                

               /* if (statement.getUpdateCount() > 0) {
                    JOptionPane.showMessageDialog(null, "Succesfully Registered");
                } else {
                    JOptionPane.showMessageDialog(null, "Something went wrong... Please try again...!!");
                    jLabelRegisterBtn.setEnabled(true);
                }*/

               
                
                if (myCon != null) {
                    myCon.close();
                }

            } catch (SQLException ex) {
                Logger.getLogger(RegistrationFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }//GEN-LAST:event_btnShareMouseClicked

    private void btnInboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInboxActionPerformed
        // TODO add your handling code here:
                data fm = new data(loginUserId);
                fm.setVisible(true);
                this.setVisible(false);
        
    }//GEN-LAST:event_btnInboxActionPerformed

    
    
    private String ConvertImageIconToBase64String(ImageIcon ii) {
        // Create a buffered image of the size of the original image icon
        BufferedImage image = new BufferedImage(ii.getIconWidth(),
        ii.getIconHeight(), BufferedImage.TYPE_INT_RGB);

        // Create a graphics object to draw the image 
        Graphics g = image.createGraphics();

        // Paint the icon on to the buffered image
        ii.paintIcon(null, g, 0, 0);
        g.dispose();

        // Convert the buffered image into a byte array
        ByteArrayOutputStream b = new ByteArrayOutputStream();
        try {
        ImageIO.write(image, "jpg", b);
        } catch (Exception ex) {
        // Handle the exception
        }
        byte[] imageInByte = b.toByteArray();

        double bytes = imageInByte.length;
        System.out.println("File Size after: " + String.format("%.2f", bytes/1024) + "kb");
        
        // Return the Base64 encoded String
        return new String(Base64.getEncoder().encode(imageInByte));
 }
    
    public static void aesEncryption(String base64String){
       String encKey = getAlphaNumericString(16);
       textSecretKey.setText(encKey);
        try {
            String encryptedString = encrypt(base64String,base64Encode(encKey));
            //System.out.println("encryptedString :: "+encryptedString);
            Encrypt.setText(encryptedString);
        } catch (Exception ex) {
            Logger.getLogger(loginFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
       
   }
    
   public static String encrypt(String Data, String secret) throws Exception {
    Key key = generateKey(secret);
    Cipher c = Cipher.getInstance("AES");
    c.init(Cipher.ENCRYPT_MODE, key);
    byte[] encVal = c.doFinal(Data.getBytes());
    String encryptedValue = Base64.getEncoder().encodeToString(encVal);
    return encryptedValue;
  } 
   
  
   
   
   private static Key generateKey(String secret) throws Exception {
    byte[] decoded = Base64.getDecoder().decode(secret.getBytes());
    Key key = new SecretKeySpec(decoded, "AES");
    return key;
  }
   
   public static String base64Encode(String str) {
    byte[] encoded = Base64.getEncoder().encode(str.getBytes());
    return new String(encoded);
  }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
        
       
        
        
    }
    
    public static String getAlphaNumericString(int n)
    {
  
        // length is bounded by 256 Character
        byte[] array = new byte[256];
        new Random().nextBytes(array);
  
        String randomString
            = new String(array, Charset.forName("UTF-8"));
  
        // Create a StringBuffer to store the result
        StringBuffer r = new StringBuffer();
  
        // Append first 20 alphanumeric characters
        // from the generated random String into the result
        for (int k = 0; k < randomString.length(); k++) {
  
            char ch = randomString.charAt(k);
  
            if (((ch >= 'a' && ch <= 'z')
                 || (ch >= 'A' && ch <= 'Z')
                 || (ch >= '0' && ch <= '9'))
                && (n > 0)) {
  
                r.append(ch);
                n--;
            }
        }
  
        // return the resultant string
        return r.toString();
    }
    
   /* private byte[] generateKey() throws NoSuchAlgorithmException {
  KeyGenerator keygen = KeyGenerator.getInstance("AES");
  keygen.init(128);
  byte[] key = keygen.generateKey().getEncoded();
  return key;
}*/
                                                      

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField Encrypt;
    private javax.swing.JButton btnInbox;
    private javax.swing.JButton btnShare;
    public javax.swing.JButton buttonCopy;
    public javax.swing.JButton buttonCopy2;
    private javax.swing.JComboBox<String> comboBox1;
    private javax.swing.JLabel fileSize;
    private javax.swing.JButton jButtonBrowseImage;
    private javax.swing.JButton jButtonDecrypt;
    private javax.swing.JButton jButtonEncrypt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelImage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelSecretKey2;
    private static javax.swing.JTextField textSecretKey;
    // End of variables declaration//GEN-END:variables

    private static class encrypt extends JTextField {

        public encrypt(int i) {
        }
    }
}
